# This workflow will build both golang backend and React.js frontend on Windows
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build
on:
  push:
    branches: [ "master", "ci-cd" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "master", "ci-cd" ]

jobs:

  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: fe/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd fe
        npm ci
    - name: Build React.js frontend
      run: |
        cd fe
        npm run build
    - name: Build Go backend
      run: |
        cd be
        go build -v ./...
    - name: Build main application
      run: |
        cd be
        go build -o ../installer/server.exe ./cmd/web
    - name: Copy frontend build to installer
      run: |
        New-Item -ItemType Directory -Path "installer/wwwroot" -Force
        if (Test-Path "fe/build") { Copy-Item -Path "fe/build/*" -Destination "installer/wwwroot/" -Recurse }
        if (Test-Path "fe/dist") { Copy-Item -Path "fe/dist/*" -Destination "installer/wwwroot/" -Recurse }
    - name: Debug frontend copy
      run: |
        Write-Host "=== Frontend source directory structure ==="
        if (Test-Path "fe/dist") {
          Write-Host "Contents of fe/dist/:"
          Get-ChildItem -Path "fe/dist/" -Recurse | ForEach-Object { Write-Host $_.FullName }
        }
        if (Test-Path "fe/build") {
          Write-Host "Contents of fe/build/:"
          Get-ChildItem -Path "fe/build/" -Recurse | ForEach-Object { Write-Host $_.FullName }
        }
        
        Write-Host "=== Destination directory structure ==="
        Write-Host "Contents of installer/wwwroot/:"
        Get-ChildItem -Path "installer/wwwroot/" -Recurse | ForEach-Object { Write-Host $_.FullName }
        
    - name: Download nginx for Windows
      run: |
        Invoke-WebRequest -Uri "https://nginx.org/download/nginx-1.24.0.zip" -OutFile "nginx.zip"
        Expand-Archive -Path "nginx.zip" -DestinationPath "."
        Move-Item "nginx-1.24.0" "installer/nginx"
    
    - name: Download NSSM for Windows service management
      run: |
        Invoke-WebRequest -Uri "https://nssm.cc/release/nssm-2.24.zip" -OutFile "nssm.zip"
        Expand-Archive -Path "nssm.zip" -DestinationPath "."
        
        # Copy the appropriate NSSM binary (64-bit) to installer directory
        Copy-Item "nssm-2.24/win64/nssm.exe" "installer/nssm.exe"
        
        # Verify NSSM was downloaded correctly
        if (Test-Path "installer/nssm.exe") {
          Write-Host "NSSM downloaded successfully"
          $nssmInfo = Get-Item "installer/nssm.exe"
          Write-Host "NSSM file size: $($nssmInfo.Length) bytes"
        } else {
          Write-Error "Failed to download NSSM"
          exit 1
        }
        
    - name: Create nginx directory structure and copy configuration
      run: |
        # Create required nginx directories
        New-Item -ItemType Directory -Path "installer/nginx/logs" -Force
        New-Item -ItemType Directory -Path "installer/nginx/temp" -Force
        New-Item -ItemType Directory -Path "installer/nginx/temp/client_body_temp" -Force
        New-Item -ItemType Directory -Path "installer/nginx/temp/proxy_temp" -Force
        New-Item -ItemType Directory -Path "installer/nginx/temp/fastcgi_temp" -Force
        New-Item -ItemType Directory -Path "installer/nginx/temp/uwsgi_temp" -Force
        New-Item -ItemType Directory -Path "installer/nginx/temp/scgi_temp" -Force
        
        # Copy nginx configuration from static file
        Copy-Item -Path "build/ci/nginx.conf" -Destination "installer/nginx/conf/nginx.conf"
        # Copy app icon
        Copy-Item -Path "build/ci/app.ico" -Destination "installer/app.ico"

    - name: Install WiX Toolset
      run: |
        dotnet tool install --global wix --version 4.0.4

    - name: Create WiX build directory structure
      run: |
        New-Item -ItemType Directory -Path "wix" -Force
        New-Item -ItemType Directory -Path "wix/files" -Force
        
        # Copy all installer files to wix/files directory for proper referencing
        Copy-Item -Path "installer/*" -Destination "wix/files/" -Recurse -Force
        
        # Verify files exist
        Write-Host "Files in wix/files directory:"
        Get-ChildItem -Path "wix/files" -Recurse | ForEach-Object { Write-Host $_.FullName }

    - name: Copy service installation scripts
      run: |
        Copy-Item -Path "build/ci/install_services.bat" -Destination "wix/files/install_services.bat"
        Copy-Item -Path "build/ci/uninstall_services.bat" -Destination "wix/files/uninstall_services.bat"

    - name: Copy WiX installer source
      run: |
        Copy-Item -Path "build/ci/Product.wxs" -Destination "wix/Product.wxs"

    - name: Generate frontend file components for WiX with proper directory structure
      run: |
        # Generate WiX components for all frontend files with proper directory structure
        $frontendPath = "wix/files/wwwroot"
        if (Test-Path $frontendPath) {
          $directoryDefinitions = ""
          $componentDefinitions = ""
          $componentRefs = ""
          $guidCounter = 1000
          $directories = @{}
          $rootDirectoryId = "WwwRootFolder"
          
          # First pass: collect all directories and create directory structure
          Get-ChildItem -Path $frontendPath -Recurse -Directory | ForEach-Object {
            $relativePath = $_.FullName.Replace((Resolve-Path $frontendPath).Path, "").TrimStart('\')
            $pathParts = $relativePath -split '\\'
            $currentPath = ""
            $parentDirectoryId = $rootDirectoryId
            
            foreach ($part in $pathParts) {
              if ($currentPath) {
                $currentPath += "\" + $part
              } else {
                $currentPath = $part
              }
              
              $directoryId = "WwwRoot_" + ($currentPath -replace '[\\\/\-\.]', '_')
              
              if (-not $directories.ContainsKey($currentPath)) {
                $directories[$currentPath] = @{
                  Id = $directoryId
                  Name = $part
                  ParentId = $parentDirectoryId
                }
              }
              $parentDirectoryId = $directoryId
            }
          }
          
          # Generate directory definitions
          $sortedDirectories = $directories.GetEnumerator() | Sort-Object Key
          foreach ($dir in $sortedDirectories) {
            $directoryDefinitions += @"
                  <Directory Id="$($dir.Value.Id)" Name="$($dir.Value.Name)" />
        "@
          }
          
          # Second pass: create components for files
          Get-ChildItem -Path $frontendPath -Recurse -File | ForEach-Object {
            $relativePath = $_.FullName.Replace((Resolve-Path $frontendPath).Path, "").TrimStart('\')
            $directoryPath = Split-Path $relativePath -Parent
            $fileName = Split-Path $relativePath -Leaf
            
            # Determine the correct directory ID
            $targetDirectoryId = $rootDirectoryId
            if ($directoryPath -and $directoryPath -ne ".") {
              $targetDirectoryId = "WwwRoot_" + ($directoryPath -replace '[\\\/\-\.]', '_')
            }
            
            $componentId = "Frontend_" + ($guidCounter++)
            $fileId = "FrontendFile_" + ($guidCounter - 1)
            $guid = [System.Guid]::NewGuid().ToString().ToUpper()
            
            $componentDefinitions += @"
        
            <Component Id="$componentId" Directory="$targetDirectoryId" Guid="$guid">
              <File Id="$fileId" Source="files/wwwroot/$($relativePath.Replace('\', '/'))" />
            </Component>
        "@
            
            $componentRefs += @"
              <ComponentRef Id="$componentId" />
        "@
          }
          
          # Read the current WiX content
          $wixContent = Get-Content "wix/Product.wxs" -Raw
          
          # Update directory structure in WwwRootFolder
          $updatedDirectorySection = @"
                <Directory Id="WwwRootFolder" Name="wwwroot">$directoryDefinitions
                </Directory>
        "@
          $wixContent = $wixContent -replace '<Directory Id="WwwRootFolder" Name="wwwroot">[\s\S]*?</Directory>', $updatedDirectorySection
          
          # Replace placeholders
          $wixContent = $wixContent -replace '<!-- FRONTEND_COMPONENTS_PLACEHOLDER -->', $componentDefinitions
          $wixContent = $wixContent -replace '<!-- FRONTEND_COMPONENT_REFS_PLACEHOLDER -->', $componentRefs
          
          $wixContent | Out-File -FilePath "wix/Product.wxs" -Encoding utf8
          
          Write-Host "Generated WiX components for frontend files with proper directory structure"
          Write-Host "Directories found: $($directories.Count)"
          Write-Host "Files processed: $(($componentDefinitions -split 'Component Id=' | Measure-Object).Count - 1)"
        }
    - name: Build MSI installer
      run: |
        cd wix
        wix build Product.wxs -o MailSender.msi -v
    - name: Test MSI file
      run: |
        if (Test-Path "wix/MailSender.msi") {
          $fileInfo = Get-Item "wix/MailSender.msi"
          Write-Host "MSI file created successfully:"
          Write-Host "  Path: $($fileInfo.FullName)"
          Write-Host "  Size: $($fileInfo.Length) bytes"
          Write-Host "  Created: $($fileInfo.CreationTime)"
        } else {
          Write-Error "MSI file was not created!"
          exit 1
        }
    - name: Upload MSI installer
      uses: actions/upload-artifact@v4
      with:
        name: mail-sender-msi-installer
        path: wix/MailSender.msi
        retention-days: 30

    - name: Debug wix folder
      run: | 
        Write-Host "Contents with wix folder:"
        Get-ChildItem -Path "wix" -Recurse | ForEach-Object { Write-Host $_.FullName }

    - name: Create Release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        files: wix/MailSender.msi
        name: Mail Sender ${{ github.ref_name }}
        body: |
          ## Mail Sender ${{ github.ref_name }}
          
          ### Installation Instructions
          1. Download `MailSender.msi`
          2. **Run the MSI installer as Administrator** (Right-click → "Run as administrator")
          3. Follow the installation wizard
          4. **Services will be automatically installed and started during installation**
          5. Access your application at http://localhost
          
          ### What's Installed
          - **Go backend service** (MailSenderBackend) - managed by NSSM with auto-restart
          - **Nginx service** (MailSenderNginx) - managed by NSSM with auto-restart  
          - **NSSM service manager** for robust service management
          - **Service management scripts** for easy control
          - All application files in `C:\Program Files\Mail Sender\`
          - Complete nginx directory structure with temp directories
          - Dedicated logs directory with service output logs
          
          ### Automatic Service Installation
          The MSI installer now **automatically installs and starts both services** during installation:
          - No need to manually run `install_services.bat` after installation
          - Services are configured with auto-restart and proper logging
          - Both services start automatically with Windows
          
          ### Service Management Scripts
          After installation, you have these scripts available in `C:\Program Files\Mail Sender\`:
          - `install_services.bat` - Manual reinstallation of services (run as Administrator)
          - `uninstall_services.bat` - Stop and remove both services (run as Administrator)
          
          ### NSSM Service Features
          - **Auto-restart on failure** with 5-second delay
          - **Automatic startup** with Windows
          - **Proper logging** with separate output/error logs for each service
          - **Log rotation** to prevent disk space issues
          - **Service recovery** handles crashes gracefully
          - **Working directory management** ensures services run in correct context
          
          ### Service Logs
          All service logs are stored in `C:\Program Files\Mail Sender\logs\`:
          - `backend_output.log` / `backend_error.log` - Go backend service logs
          - `nginx_output.log` / `nginx_error.log` - Nginx service logs
          
          ### Troubleshooting
          - **Installation must be run as Administrator** for service installation to work
          - If services fail to start, check the error logs in the logs directory
          
          ### Manual Service Control with NSSM
          You can also control services manually using NSSM commands:
          ```cmd
          # Start services
          nssm start MailSenderBackend
          nssm start MailSenderNginx
          
          # Stop services
          nssm stop MailSenderBackend
          nssm stop MailSenderNginx
          
          # Restart services
          nssm restart MailSenderBackend
          nssm restart MailSenderNginx
          
          # Check status
          nssm status MailSenderBackend
          nssm status MailSenderNginx
          
          # View service configuration
          nssm get MailSenderBackend
          nssm get MailSenderNginx
          
          # Edit service (opens GUI)
          nssm edit MailSenderBackend
          nssm edit MailSenderNginx
          ```
          
          ### Uninstallation
          1. Use Windows Control Panel > Programs and Features to remove the application
          2. Or run: `msiexec /x MailSender.msi`
          3. **Services will be automatically stopped and removed during uninstallation**
          
          Service logs will remain in the logs directory after uninstallation for your reference.
          
          ### What's New in This Version
          - **Automatic service installation** during MSI installation
          - **Automatic service removal** during MSI uninstallation
          - **Silent service management** scripts for automated installation
          - **Improved error handling** in service installation process
          - **Enhanced logging** for better troubleshooting
